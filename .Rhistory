text(x=cur_t-0.5, y=ymax*0.2, labels="Actual", pos=2, col="red4", cex=1)
legend("topleft",
legend=c("exp fit", "linear fit", "actual"),
lty=c(2,5,0), pch=c(19, 19, 1), col=c("red", "blue", "black"))
plot(df[,"t"], df[,"confirmed"], type="p", pch=1, cex=1, bg="black",
xaxt="n", ylim=c(0,ymax),
xlab="Date", ylab="# confirmed cases",
main=title)
axis(1, at=df$t, format(df$date, "%b %d"), cex.axis = .7, tick=TRUE)
lines(df[(n-15):n,"t"], df[(n-15):n,"exp_pred"], col="red", lwd=2.5, lty=2)
lines(df[(n-15):n,"t"], df[(n-15):n,"lin_pred"], col="blue", lwd=2.5, lty=5)
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"exp_pred"], cex=2.3, pch=19, col="red")
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"lin_pred"], cex=2.3, pch=19, col="blue")
abline(v=cur_t, col="grey", lwd=2)
grid(NA, 10, lwd = 2)
text(x=cur_t, y=100, labels=cur_date, pos=3, col="blue", cex=0.8)
txt1 = paste(as.character(df[cur_t+1, "date"]), ":")
txt2 = paste(format(round(df[cur_t+1, "exp_pred"],0), big.mark=","), "(exp)")
txt3 = paste(format(round(df[cur_t+1, "lin_pred"],0), big.mark=","), "(linear)")
text(x=min(df[,"t"]), y=ymax*0.76, labels=txt1, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.7, labels=txt2, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.64, labels=txt3, pos=4, col="red", cex=1.3)
text(x=cur_t, y=ymax*0.2, labels="Forecast", pos=4, col="red4", cex=1)
text(x=cur_t-0.5, y=ymax*0.2, labels="Actual", pos=2, col="red4", cex=1)
legend("topleft",
legend=c("exp fit", "linear fit", "actual"),
lty=c(2,5,0), pch=c(19, 19, 1), col=c("red", "blue", "black"))
plot(df[,"t"], df[,"confirmed"], type="p", pch=1, cex=1, bg="black",
xaxt="n", ylim=c(0,ymax),
xlab="Date", ylab="# confirmed cases",
main=title)
axis(1, at=df$t, format(df$date, "%b %d"), cex.axis = .7, tick=TRUE)
lines(df[(n-15):n,"t"], df[(n-15):n,"exp_pred"], col="red", lwd=2.5, lty=2)
lines(df[(n-15):n,"t"], df[(n-15):n,"lin_pred"], col="blue", lwd=2.5, lty=5)
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"exp_pred"], cex=2, pch=19, col="red")
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"lin_pred"], cex=2, pch=19, col="blue")
abline(v=cur_t, col="grey", lwd=2)
grid(NA, 10, lwd = 2)
text(x=cur_t, y=100, labels=cur_date, pos=3, col="blue", cex=0.8)
txt1 = paste(as.character(df[cur_t+1, "date"]), ":")
txt2 = paste(format(round(df[cur_t+1, "exp_pred"],0), big.mark=","), "(exp)")
txt3 = paste(format(round(df[cur_t+1, "lin_pred"],0), big.mark=","), "(linear)")
text(x=min(df[,"t"]), y=ymax*0.76, labels=txt1, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.7, labels=txt2, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.64, labels=txt3, pos=4, col="red", cex=1.3)
text(x=cur_t, y=ymax*0.2, labels="Forecast", pos=4, col="red4", cex=1)
text(x=cur_t-0.5, y=ymax*0.2, labels="Actual", pos=2, col="red4", cex=1)
legend("topleft",
legend=c("exp fit", "linear fit", "actual"),
lty=c(2,5,0), pch=c(19, 19, 1), col=c("red", "blue", "black"))
?seq
seq(from=df[1,"t"], to=df[n, "t"], length.out=6)
seq(from=df[1,"t"], to=df[n, "t"], by=3)
plot(df[,"t"], df[,"confirmed"], type="p", pch=1, cex=1, bg="black",
xaxt="n", ylim=c(0,ymax),
xlab="Date", ylab="# confirmed cases",
main=title)
ix = seq(from=df[1,"t"], to=df[n, "t"], by=3)
axis(1, at=df$t[ix], format(df$date[ix], "%b %d"), cex.axis = .7, tick=TRUE)
lines(df[(n-15):n,"t"], df[(n-15):n,"exp_pred"], col="red", lwd=2.5, lty=2)
lines(df[(n-15):n,"t"], df[(n-15):n,"lin_pred"], col="blue", lwd=2.5, lty=5)
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"exp_pred"], cex=2, pch=19, col="red")
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"lin_pred"], cex=2, pch=19, col="blue")
abline(v=cur_t, col="grey", lwd=2)
grid(NA, 10, lwd = 2)
text(x=cur_t, y=100, labels=cur_date, pos=3, col="blue", cex=0.8)
txt1 = paste(as.character(df[cur_t+1, "date"]), ":")
txt2 = paste(format(round(df[cur_t+1, "exp_pred"],0), big.mark=","), "(exp)")
txt3 = paste(format(round(df[cur_t+1, "lin_pred"],0), big.mark=","), "(linear)")
text(x=min(df[,"t"]), y=ymax*0.76, labels=txt1, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.7, labels=txt2, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.64, labels=txt3, pos=4, col="red", cex=1.3)
text(x=cur_t, y=ymax*0.2, labels="Forecast", pos=4, col="red4", cex=1)
text(x=cur_t-0.5, y=ymax*0.2, labels="Actual", pos=2, col="red4", cex=1)
legend("topleft",
legend=c("exp fit", "linear fit", "actual"),
lty=c(2,5,0), pch=c(19, 19, 1), col=c("red", "blue", "black"))
plot(df[,"t"], df[,"confirmed"], type="p", pch=1, cex=1, bg="black",
xaxt="n", ylim=c(0,ymax),
xlab="Date", ylab="# confirmed cases",
main=title)
ix = seq(from=df[1,"t"], to=df[n, "t"], by=4)
axis(1, at=df$t[ix], format(df$date[ix], "%b %d"), cex.axis = .8, tick=TRUE)
lines(df[(n-15):n,"t"], df[(n-15):n,"exp_pred"], col="red", lwd=2.5, lty=2)
lines(df[(n-15):n,"t"], df[(n-15):n,"lin_pred"], col="blue", lwd=2.5, lty=5)
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"exp_pred"], cex=2, pch=19, col="red")
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"lin_pred"], cex=2, pch=19, col="blue")
abline(v=cur_t, col="grey", lwd=2)
grid(NA, 10, lwd = 2)
text(x=cur_t, y=100, labels=cur_date, pos=3, col="blue", cex=0.8)
txt1 = paste(as.character(df[cur_t+1, "date"]), ":")
txt2 = paste(format(round(df[cur_t+1, "exp_pred"],0), big.mark=","), "(exp)")
txt3 = paste(format(round(df[cur_t+1, "lin_pred"],0), big.mark=","), "(linear)")
text(x=min(df[,"t"]), y=ymax*0.76, labels=txt1, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.7, labels=txt2, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.64, labels=txt3, pos=4, col="red", cex=1.3)
text(x=cur_t, y=ymax*0.2, labels="Forecast", pos=4, col="red4", cex=1)
text(x=cur_t-0.5, y=ymax*0.2, labels="Actual", pos=2, col="red4", cex=1)
legend("topleft",
legend=c("exp fit", "linear fit", "actual"),
lty=c(2,5,0), pch=c(19, 19, 1), col=c("red", "blue", "black"))
?grid
plot(df[,"t"], df[,"confirmed"], type="p", pch=1, cex=1, bg="black",
xaxt="n", ylim=c(0,ymax),
xlab="Date", ylab="# confirmed cases",
main=title)
ix = seq(from=df[1,"t"], to=df[n, "t"], by=4)
axis(1, at=df$t[ix], format(df$date[ix], "%b %d"), cex.axis = .8, tick=TRUE)
lines(df[(n-15):n,"t"], df[(n-15):n,"exp_pred"], col="red", lwd=2.5, lty=2)
lines(df[(n-15):n,"t"], df[(n-15):n,"lin_pred"], col="blue", lwd=2.5, lty=5)
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"exp_pred"], cex=2, pch=19, col="red")
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"lin_pred"], cex=2, pch=19, col="blue")
abline(v=cur_t, col="grey", lwd=2)
grid(nx=NULL, ny=NULL, lwd = 2)
text(x=cur_t, y=100, labels=cur_date, pos=3, col="blue", cex=0.8)
# format the numbers
txt1 = paste(as.character(df[cur_t+1, "date"]), ":")
txt2 = paste(format(round(df[cur_t+1, "exp_pred"],0), big.mark=","), "(exp)")
txt3 = paste(format(round(df[cur_t+1, "lin_pred"],0), big.mark=","), "(linear)")
# prediction
text(x=min(df[,"t"]), y=ymax*0.76, labels=txt1, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.7, labels=txt2, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.64, labels=txt3, pos=4, col="red", cex=1.3)
# mark the two sides
text(x=cur_t, y=ymax*0.2, labels="Forecast", pos=4, col="red4", cex=1)
text(x=cur_t-0.5, y=ymax*0.2, labels="Actual", pos=2, col="red4", cex=1)
legend("topleft",
legend=c("exp fit", "linear fit", "actual"),
lty=c(2,5,0), pch=c(19, 19, 1), col=c("red", "blue", "black"))
plot(df[,"t"], df[,"confirmed"], type="p", pch=1, cex=1, bg="black",
xaxt="n", ylim=c(0,ymax),
xlab="Date", ylab="# confirmed cases",
main=title)
ix = seq(from=df[1,"t"], to=df[n, "t"], by=4)
axis(1, at=df$t[ix], format(df$date[ix], "%b %d"), cex.axis = .8, tick=TRUE)
lines(df[(n-15):n,"t"], df[(n-15):n,"exp_pred"], col="red", lwd=2.5, lty=2)
lines(df[(n-15):n,"t"], df[(n-15):n,"lin_pred"], col="blue", lwd=2.5, lty=5)
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"exp_pred"], cex=2, pch=19, col="red")
points(df[(cur_t+1):(cur_t+2),"t"], df[(cur_t+1):(cur_t+2),"lin_pred"], cex=2, pch=19, col="blue")
abline(v=cur_t, col="grey", lwd=2)
grid(nx=NA, ny=NULL, lwd = 2)
text(x=cur_t, y=100, labels=cur_date, pos=3, col="blue", cex=0.8)
# format the numbers
txt1 = paste(as.character(df[cur_t+1, "date"]), ":")
txt2 = paste(format(round(df[cur_t+1, "exp_pred"],0), big.mark=","), "(exp)")
txt3 = paste(format(round(df[cur_t+1, "lin_pred"],0), big.mark=","), "(linear)")
# prediction
text(x=min(df[,"t"]), y=ymax*0.76, labels=txt1, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.7, labels=txt2, pos=4, col="red", cex=1.3)
text(x=min(df[,"t"])+1, y=ymax*0.64, labels=txt3, pos=4, col="red", cex=1.3)
# mark the two sides
text(x=cur_t, y=ymax*0.2, labels="Forecast", pos=4, col="red4", cex=1)
text(x=cur_t-0.5, y=ymax*0.2, labels="Actual", pos=2, col="red4", cex=1)
legend("topleft",
legend=c("exp fit", "linear fit", "actual"),
lty=c(2,5,0), pch=c(19, 19, 1), col=c("red", "blue", "black"))
df
forecast.df
fnm = "plot_fun.R"
fun_path = paste(utils_path, fnm, sep="")
source(fun_path)
title = "Fig. 1 Predictions vs Actual Confirmed Cases (China)"
fnm ="latest-prediction.png"
predict_vs_actual_plot(forecast.df, last_t, title, fnm)
last_t = dat[N,"t"]
last_t
predict_vs_actual_plot(forecast.df, last_t, title, fnm)
fnm = paste("prediction-", today.ch, ".png", sep="")
fnm
today = Sys.Date()
today.ch = as.character(today)
fnm = paste("prediction-", today.ch, ".png", sep="")
fnm
full_path = paste(plot_path, fnm, sep="")
full_path
predict_vs_actual_plot(forecast.df, last_t, title, full_path)
file.copy(from=full_path, to=home)
fnm
file.rename(from=file.path(home, fnm), to=file.path(home, "latest-prediction.png"))
Model_param
Daily_updates
class(Daily_updates)
df
df = Daily_updates
dte = as.Date(rownames(df))
dte
X11()
title="Fig 2"
fnm
fnm = "Fig2"
fnm = "Fig2.png"
plot(dte, df[,"beta"], type="b", pch=1, cex=1, bg="red",
xaxt="n",
xlab="Date", ylab="Fitted Beta",
main=title)
# only print every 4th date
ix = seq(from=1, to=nrow(df), by=4)
ix
# only print every 4th date
ix = seq(from=1, to=nrow(df), by=3)
axis(1, at=dte[ix], format(dte[ix], "%b %d"), cex.axis = .8, tick=TRUE)
plot(dte, df[,"beta"], type="b", pch=1, cex=2, bg="red",
xaxt="n",
xlab="Date", ylab="Fitted Beta",
main=title)
# only print every 4th date
ix = seq(from=1, to=nrow(df), by=3)
axis(1, at=dte[ix], format(dte[ix], "%b %d"), cex.axis = .8, tick=TRUE)
plot(df[,"beta"], type="b", pch=1, cex=2, bg="red",
xaxt="n",
xlab="Date", ylab="Fitted Beta",
main=title)
# only print every 4th date
ix = seq(from=1, to=nrow(df), by=3)
axis(1, at=dte[ix], format(dte[ix], "%b %d"), cex.axis = .8, tick=TRUE)
plot(dte, df[,"beta"], type="b", pch=19, cex=2, bg="red",
xaxt="n",
xlab="Date", ylab="Fitted Beta",
main=title)
# only print every 4th date
ix = seq(from=1, to=nrow(df), by=3)
axis(1, at=dte[ix], format(dte[ix], "%b %d"), cex.axis = .8, tick=TRUE)
plot(dte, df[,"beta"], type="b", pch=19, cex=2, col="red",
xaxt="n",
xlab="Date", ylab="Fitted Beta",
main=title)
# only print every 4th date
ix = seq(from=1, to=nrow(df), by=3)
axis(1, at=dte[ix], format(dte[ix], "%b %d"), cex.axis = .8, tick=TRUE)
plot(dte, df[,"beta"], type="b", pch=19, cex=2, col="black", bg="red",
xaxt="n",
xlab="Date", ylab="Fitted Beta",
main=title)
# only print every 4th date
ix = seq(from=1, to=nrow(df), by=3)
axis(1, at=dte[ix], format(dte[ix], "%b %d"), cex.axis = .8, tick=TRUE)
plot(dte, df[,"beta"], type="b", pch=21, cex=2, col="black", bg="red",
xaxt="n",
xlab="Date", ylab="Fitted Beta",
main=title)
# only print every 4th date
ix = seq(from=1, to=nrow(df), by=3)
axis(1, at=dte[ix], format(dte[ix], "%b %d"), cex.axis = .8, tick=TRUE)
grid(nx=NA, ny=NULL)
df
plot.new()
textbox(c(0,0.2), 1, c("many words","more words","why not?",
"keep going",rep("and going",10)))
textbox(c(0.3,0.5), 1, c("keep going",rep("and going",10)), cex=0.45,
col="blue", border="red", fill="#00FFEE80", density=25, angle=60)
textbox(c(0.6,0.8), 1, c("keep going",rep("and going",10)), justify='c', cex=0.6,
leading=1, font=4, border="gold", lty=2, lwd=4, margin=0.025)
textbox(c(0.6,0.8), 0.5, c("keep going",rep("and going",10)), justify='r', cex=0.7,
col="purple", font=3, border="green", margin=-0.025)
lines(c(0,1), c(1,1), col="red", lty=2)
lines(c(0,1), c(0.5,0.5), col="red", lty=2)
library(plotrix)
install.packages("plotrix")
library(plotrix)
plot.new()
textbox(c(0,0.2), 1, c("many words","more words","why not?",
"keep going",rep("and going",10)))
textbox(c(0.3,0.5), 1, c("keep going",rep("and going",10)), cex=0.45,
col="blue", border="red", fill="#00FFEE80", density=25, angle=60)
textbox(c(0.6,0.8), 1, c("keep going",rep("and going",10)), justify='c', cex=0.6,
leading=1, font=4, border="gold", lty=2, lwd=4, margin=0.025)
textbox(c(0.6,0.8), 0.5, c("keep going",rep("and going",10)), justify='r', cex=0.7,
col="purple", font=3, border="green", margin=-0.025)
lines(c(0,1), c(1,1), col="red", lty=2)
lines(c(0,1), c(0.5,0.5), col="red", lty=2)
dat_fnm = "actual-vs-predict.csv"
dat_fnm
csv_file = "actual-vs-predict.csv"
full_path = paste(data_path, csv_file, sep="")
dat1 = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat1
dat1[,"date"] = as.Date(dat1[,"date"], format="%Y-%m-%d")
delta_min = min(dat1[,"delta"])
ymin = floor(delta_min/1000)*1000
ymin
delta_min
ymax = ceiling(delta_min/1000)*1000
ymax
delta_min = min(dat1[,"delta"], na.rm = TRUE)
delta_max = max(dat1[,"delta"], na.rm = TRUE)
ymin = floor(delta_min/1000)*1000
ymax = ceiling(delta_max/1000)*1000
ymin
ymax
title = "Fig. 2 Prediction Errors (exp model)"
fnm = "actual-vs-predict.csv"
full_path = paste(data_path, fnm, sep="")
full_path
fnm = "plot_fun.R"
fun_path = paste(utils_path, fnm, sep="")
source(fun_path)
title = "Fig. 2 Prediction Errors (exp model)"
fnm = "actual-vs-predict.csv"
full_path = paste(data_path, fnm, sep="")
plot_fnm = "actual-vs-predict.png"
exp_delta_plot(full_path, title, plot_fnm)
fun_path
source(fun_path)
exp_delta_plot()
exp_delta_plot
title = "Fig. 2 Prediction Errors (exp model)"
fnm = "actual-vs-predict.csv"
full_path = paste(data_path, fnm, sep="")
plot_fnm = "actual-vs-predict.png"
exp_delta_plot(full_path, title, plot_fnm)
source(fun_path)
title = "Fig. 2 Prediction Errors (exp model)"
fnm = "actual-vs-predict.csv"
full_path = paste(data_path, fnm, sep="")
plot_fnm = "actual-vs-predict.png"
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
as.integer(dat1[,"date"])
source(fun_path)
title = "Fig. 2 Prediction Errors (exp model)"
fnm = "actual-vs-predict.csv"
full_path = paste(data_path, fnm, sep="")
plot_fnm = "actual-vs-predict.png"
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
?mtext
?text
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
source(fun_path)
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
title = "Fig. 3 Beta history"
fnm = "beta_history.png"
full_path = paste(data_path, fnm, sep="")
source(fun_path)
beta_plot(Daily_updates, title, full_path)
full_path
title = "Fig. 3 Beta history"
fnm = "beta_history.png"
full_path = paste(plot_path, fnm, sep="")
beta_plot(Daily_updates, title, full_path)
class(Daily_updates)
if ( file.exists("nCoV.RData") ) load("nCoV.RData")
ls()
rm(full_path, data_path, plot_path, csv_file, dat, model, last.t, latest.date)
home = getwd()
cat("home : ", home)
data_path = paste(home,  "/data/", sep="")
plot_path = paste(home,  "/plots/", sep="")
utils_path = paste(home, "/utils/", sep="")
fnm = "plot_fun.R"
fun_path = paste(utils_path, fnm, sep="")
source(fun_path)
today = Sys.Date()
today.ch = as.character(today)
today.ch
today.ch = "2020-02-10"
rm(today)
csv_file = "corona_data.csv"
full_path = paste(data_path, csv_file, sep="")
cat("csv full path : ", full_path)
# override dat with the latest data
dat = read.csv(full_path, header=TRUE, stringsAsFactors=FALSE)
dat = dat[9:nrow(dat),]
N = nrow(dat)
dat[,"date"] = as.Date(dat[,"date"], format="%Y-%m-%d")
dat[,"t"] = 1:N
cat("====== Data ============================ \n")
dat
# ==== Estimate starting parameters ===================================
# Initial intercept must be less than min(y) and greater than zero
init_intcpt = min(dat[,"confirmed"]) / 2
# Estimate other parameters using a linear model
model0 = lm(log(confirmed - init_intcpt)~t, data=dat)
alpha0 = exp(coef(model0)[1])
beta0 = coef(model0)[2]
init_param = list(alpha=alpha0, beta=beta0, intcpt=init_intcpt)
cat("===== Starting parameters =============================== \n")
init_param
# ==== Exponential model ==============================================
model = nls(confirmed ~ alpha*exp(beta*t) + intcpt , data=dat, start=init_param)
res = summary(model)
cat("===== Model summary ====================================== \n")
res
length(Model_param)
Model_param[[18]]
latest.date = as.character(dat[nrow(dat), "date"])
latest.date
Daily_updates
res$coefficients[,1]
# prepare a data frame to hold model predictions
fcast_horizon = 3
last_date = dat[N,"date"]
last_date
# prepare a data frame to hold model predictions
fcast_horizon = 3
last_t = dat[N,"t"]
last_t
forecast.df = data.frame(matrix(NA, nrow=N+fcast_horizon, ncol=5))
colnames(forecast.df) = c("date", "t", "exp_pred", "lin_pred", "confirmed")
forecast.df[1:N, "confirmed"] = dat[,"confirmed"]
dte = c(dat[,"date"], last_date + 1:fcast_horizon)
forecast.df[,"date"] = dte
t = c(dat[,"t"], last.t + 1:fcast_horizon)
t = c(dat[,"t"], last_t + 1:fcast_horizon)
forecast.df[,"t"] = t
forecast.df
# prediction =======================================
pred = predict(model, newdata=forecast.df, se.fit = TRUE, level=0.95)
forecast.df[,"exp_pred"] = pred
forecast.df
# ==== Linear model ===================================
dat2 = dat[12:N,]
model2 = glm(confirmed ~ t, family=gaussian, data=dat2)
res2 = summary(model2)
# prediction ==========================================
pred2 = predict(model2, newdata=forecast.df)
forecast.df[,"lin_pred"] = pred2
forecast.df
length(Forecast)
Forecast[[8]]
Forecast[[8]] = forecast.df
Forecast[[8]]
Forecast[[7]]
# ==== Plots ======================================================
title = "Fig. 1 Predictions vs Actual Confirmed Cases (China only)"
fnm = paste("prediction-", today.ch, ".png", sep="")
full_path = paste(plot_path, fnm, sep="")
predict_vs_actual_plot(forecast.df, last_t, title, full_path)
# make a copy in top dir
file.copy(from=full_path, to=home)
file.rename(from=file.path(home, fnm), to=file.path(home, "latest-prediction.png"))
title = "Fig. 2 Prediction Errors (Exp model)"
fnm = "actual-vs-predict.csv"
full_path = paste(data_path, fnm, sep="")
plot_fnm = "actual-vs-predict.png"
exp_delta_plot(dat_fnm=full_path, title=title, plot_fnm=plot_fnm)
title = "Fig. 3 Beta history"
fnm = "beta_history.png"
full_path = paste(plot_path, fnm, sep="")
beta_plot(Daily_updates, title, full_path)
source(fun_path)
# ==== Plots ======================================================
title = "Fig. 1 Predictions vs Actual Confirmed Cases (China only)"
fnm = paste("prediction-", today.ch, ".png", sep="")
full_path = paste(plot_path, fnm, sep="")
predict_vs_actual_plot(forecast.df, last_t, title, full_path)
# make a copy in top dir
file.copy(from=full_path, to=home)
file.rename(from=file.path(home, fnm), to=file.path(home, "latest-prediction.png"))
source(fun_path)
# ==== Plots ======================================================
title = "Fig. 1 Predictions vs Actual Confirmed Cases (China only)"
fnm = paste("prediction-", today.ch, ".png", sep="")
full_path = paste(plot_path, fnm, sep="")
predict_vs_actual_plot(forecast.df, last_t, title, full_path)
# make a copy in top dir
file.copy(from=full_path, to=home)
file.rename(from=file.path(home, fnm), to=file.path(home, "latest-prediction.png"))
source(fun_path)
# ==== Plots ======================================================
title = "Fig. 1 Predictions vs Actual Confirmed Cases (China only)"
fnm = paste("prediction-", today.ch, ".png", sep="")
full_path = paste(plot_path, fnm, sep="")
predict_vs_actual_plot(forecast.df, last_t, title, full_path)
# make a copy in top dir
file.copy(from=full_path, to=home)
file.rename(from=file.path(home, fnm), to=file.path(home, "latest-prediction.png"))
source(fun_path)
# ==== Plots ======================================================
title = "Fig. 1 Predictions vs Actual Confirmed Cases (China only)"
fnm = paste("prediction-", today.ch, ".png", sep="")
full_path = paste(plot_path, fnm, sep="")
predict_vs_actual_plot(forecast.df, last_t, title, full_path)
# make a copy in top dir
file.copy(from=full_path, to=home)
file.rename(from=file.path(home, fnm), to=file.path(home, "latest-prediction.png"))
source(fun_path)
# ==== Plots ======================================================
title = "Fig. 1 Predictions vs Actual Confirmed Cases (China only)"
fnm = paste("prediction-", today.ch, ".png", sep="")
full_path = paste(plot_path, fnm, sep="")
predict_vs_actual_plot(forecast.df, last_t, title, full_path)
# make a copy in top dir
file.copy(from=full_path, to=home)
file.rename(from=file.path(home, fnm), to=file.path(home, "latest-prediction.png"))
title = "Fig. 2 Prediction Errors (Exp model)"
source(fun_path)
# ==== Plots ======================================================
title = "Fig. 1 Predictions vs Actual Confirmed Cases (China only)"
fnm = paste("prediction-", today.ch, ".png", sep="")
full_path = paste(plot_path, fnm, sep="")
predict_vs_actual_plot(forecast.df, last_t, title, full_path)
# make a copy in top dir
file.copy(from=full_path, to=home)
file.rename(from=file.path(home, fnm), to=file.path(home, "latest-prediction.png"))
